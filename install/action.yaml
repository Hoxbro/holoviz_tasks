name: Install Action
description: Initializes a conda environment
inputs:
  name:
    description: The name of the task
    required: true
  channels:
    description: The conda channels to fetch packages from
    default: defaults
  channel-priority:
    description: Channel priority determines if packages in lower priority channels are considered if a package with the same name appears in a higher priority channel.
    required: false
    default: flexible
  python-version:
    description: The Python version to install
    required: true
    default: '3.7'
  envs:
    description: The environment to initialize
    required: true
    default: -o examples
  nodejs:
    description: Whether to install nodejs in the base environment
    required: false
    default: 'false'
  cache:
    description: Whether to enable caching
    required: false
    default: 'false'
  opengl:
    description: Whether to install openGL
    required: false
    default: 'false'
  playwright:
    description: Whether to install playwright
    required: false
    default: 'false'
outputs:
  cache-hit:
    description: Whether the cache was hit
    value: ${{ steps.cache.outputs.cache-hit }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: "100"
    - run: git fetch --prune --tags --unshallow
      shell: bash -l {0}
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        # channel-priority: ${{ inputs.channel-priority }}
        # channels: ${{ inputs.channels}}
    - run: |
        conda update -c defaults -n base conda
      shell: bash -l {0}
    - run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      shell: bash -l {0}
    - if: runner.os == 'Windows'
      run: echo "ENVS_PATH=${{ format('{0}\{1}', env.CONDA, 'envs') }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - if: runner.os != 'Windows'
      run: echo "ENVS_PATH=${{ format('{0}/{1}', env.CONDA, 'envs') }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - if: inputs.cache == 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.ENVS_PATH }}
        key: ${{ inputs.name  }}-${{ runner.os }}-conda-${{ inputs.python-version }}-${{ hashFiles('setup.py') }}-${{ env.TODAY }}
      id: cache
    - if: inputs.nodejs == 'true' && steps.cache.outputs.cache-hit != 'true'
      run: |
        conda install nodejs
      shell: bash -l {0}
    - if: steps.cache.outputs.cache-hit != 'true'
      run: |
        conda create -n test-environment
        conda activate test-environment
        IFS="," read -a channels_array <<< ${{ inputs.channels }}
        for channel in "${channels_array[@]}"; do
          if [ "$channel" = "nodefaults" ]
          then
            echo "Remove defaults channel"
            conda config --remove channels defaults
          else
            echo "Add channel $channel"
            conda config --env --append channels ${channel}
          fi
        done
        conda config --env --set channel_priority ${{ inputs.channel-priority }}
        conda config --show-sources
        conda info
        conda install python=${{ inputs.python-version }} pyctdev
      shell: bash -l {0}
    # - if: inputs.cache == 'true' && steps.cache.outputs.cache-hit == 'true'
    #   run: |
    #     conda activate test-environment
    #     pip install -e . --no-deps --no-build-isolation
    #   shell: bash -l {0}
    # - if: inputs.cache != 'true' || steps.cache.outputs.cache-hit != 'true'
    #   run: |
    #     conda activate test-environment
    #     doit develop_install ${{ inputs.envs }}
    #   shell: bash -l {0}
    # - if: inputs.opengl == 'true' && runner.os == 'Windows'
    #   run: |
    #     git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
    #     powershell gl-ci-helpers/appveyor/install_opengl.ps1
    #   shell: bash -l {0}
    # - if: inputs.opengl == 'true' && runner.os == 'Linux'
    #   run: |
    #     sudo apt-get install libglu1-mesa
    #     /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x24
    #     sleep 3
    #   shell: bash -l {0}
    # - if: inputs.opengl == 'true' && runner.os == 'Linux' && (inputs.cache != 'true' || steps.cache.outputs.cache-hit != 'true')
    #   run: |
    #     conda activate test-environment
    #     conda install mesalib
    #   shell: bash -l {0}
    # - if: inputs.playwright == 'true' && (inputs.cache != 'true' || steps.cache.outputs.cache-hit != 'true')
    #   run: |
    #     conda activate test-environment
    #     pip install playwright pytest-playwright
    #   shell: bash -l {0}
    # - if: inputs.playwright == 'true'
    #   run: |
    #     conda activate test-environment
    #     playwright install chromium
    #   shell: bash -l {0}
    # - run: |
    #       conda activate test-environment
    #       doit env_capture
    #   shell: bash -l {0}
